{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\GitRepo\\\\Next-React-apps\\\\hello-next\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  const {\n    0: inView,\n    1: setInview\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInview(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/GitRepo/Next-React-apps/hello-next/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","window","addEventListener","scrollHandler","removeEventListener","inView","setInview","isInView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC5D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,aAArC;AACD,KAFD;AAGD,GALQ,CAAT;AAOA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMW,QAAQ,GAAG,MAAM;AACrB,QAAIP,QAAQ,CAACQ,OAAb,EAAsB;AACpB,YAAMC,IAAI,GAAGT,QAAQ,CAACQ,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,QAAMV,aAAa,GAAG,MAAM;AAC1BG,IAAAA,SAAS,CAAC,MAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAKA,SAAO;AAAK,IAAA,GAAG,EAAEF,MAAM,GAAGN,YAAH,GAAkBD,UAAlC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEE,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAzBD;;AA2BA,eAAeH,mBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\n\r\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\r\n  const imageRef = useRef(null);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", scrollHandler);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", scrollHandler);\r\n    };\r\n  });\r\n\r\n  const [inView, setInview] = useState(false);\r\n\r\n  const isInView = () => {\r\n    if (imageRef.current) {\r\n      const rect = imageRef.current.getBoundingClientRect();\r\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const scrollHandler = () => {\r\n    setInview(() => {\r\n      return isInView();\r\n    });\r\n  };\r\n  return <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />;\r\n};\r\n\r\nexport default ImageToggleOnScroll;\r\n"]},"metadata":{},"sourceType":"module"}